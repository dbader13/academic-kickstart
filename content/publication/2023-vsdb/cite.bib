@inproceedings{2023-VBDB,
 author = {Soroush Vahidi and Baruch Schieber and Zhihui Du and David A. Bader},
 booktitle = {The 27th Annual IEEE High Performance Extreme Computing Conference (HPEC), Virtual, September 25-29, 2023},
 groups = {Edited},
 title = {Parallel Longest Common SubSequence Analysis In {Chapel}},
 year = {2023},
 url       = {},
 doi={},
 abstract = {One of the most important problems in the field of string algorithms is the longest common subsequence problem (LCS). The problem is NP-HARD for an arbitrary number of strings but can be solved in polynomial time for a fixed number of strings. In this paper, we select a typical parallel LCS algorithm and integrate it into our large-scale string analysis algorithm library to support different types of large string analysis. Specifically, we take advantage of the high-level parallel language, Chapel, to integrate Lu and Liu’s parallel LCS algorithm into Arkouda, an open-source framework. Through Arkouda, data scientists can handle large string analytics eﬀiciently on the back-end high-performance computing resources from the front-end Python interface easily. The Chapel-enabled parallel LCS algorithm can identify the longest common subsequences of two strings, and some experimental results are also given to show its performance.}
}

@inproceedings{2018-FGG+,
 abstract = {List intersections are ubiquitous and can be found in a wide range of applications, including triangle counting and finding the maximal k-truss, both of which are part of the HPEC Static Graph Challenge. For many graph based problems it is necessary to find intersections for a very large number of lists-these lists tend to vary greatly in size and are difficult to efficiently load-balance. Numerous parallel algorithms on list intersections for triangle counting have been proposed, but load-balancing decisions are typically made at a global level. In this paper we present an efficient and adaptive approach to load-balancing at a finer granularity. Our approach assigns a different number of threads for different intersections in order to effectively utilize the resources of the GPU. We show the applicability of our load-balancing method to two different intersection methods, one search-based and one merge-based. Our algorithm outperforms several recent triangle counting algorithms, including recent HPEC Graph Challenge Champions.},
 address = {Los Alamitos, CA},
 author = {James Fox and Oded Green and Kasimir Gabert and Xiaojing An and David A. Bader},
 bibsource = {dblp computer science bibliography, https://dblp.org},
 biburl = {https://dblp.org/rec/bib/conf/hpec/FoxGGAB18},
 booktitle = {2018 IEEE High Performance Extreme Computing Conference, HPEC 2018, Waltham, MA, USA, September 25-27, 2018},
 doi = {10.1109/HPEC.2018.8547759},
 groups = {Edited},
 note = {Graph Challenge Finalisst},
 pages = {1--7},
 publisher = {IEEE Computer Society},
 timestamp = {Sat, 08 Dec 2018 18:44:03 +0100},
 title = {Fast and Adaptive List Intersections on the GPU},
 url = {https://doi.org/10.1109/HPEC.2018.8547759},
 year = {2018}
}

